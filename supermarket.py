# - Importing
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.figure_factory as ff
import plotly.graph_objects as go
import streamlit as st
###################################
# - Cleaning
data = pd.read_csv('supermarket_sales new.csv')
df = pd.DataFrame(data)
df ['Tax 5%']= (df['Unit price'] * df['Quantity'])*0.05
df['total price'] = ((df['Unit price'] * df['Quantity'])*0.05)+(df['Unit price'] * df['Quantity'])
df.drop('Branch' ,inplace=True, axis=1)
######################################
#####################################
#####################################
with st.sidebar:
    st.title('SuperMarket Dashboard')
select_visual = st.sidebar.selectbox('Select Please',  
                                    ('Select','General', 'Gender-Based Analysis', 'Customer Type Analysis' ,
                                     'City Analysis' , 'Tax and Revenue Analysis' , 'Product Analysis' , 'summary'))
if select_visual=='Select':
    st.title('Please Select')
##############################################################################################################################
# - General
###############
elif select_visual == 'General':
    tabs= st.tabs(['total revenue generated by each city','most popular Product','average Tax (5%)','total quantity sold','highest number of unique customers'])

#1-What is the total revenue generated by each city?
    with tabs[0]:
        st.title('What is the total revenue generated by each city?')
        citp = df.groupby(['City'])['Tax 5%'].sum().reset_index()
        citp = citp.sort_values(by ='Tax 5%' ,ascending=1)
        q1 = px.bar(citp , x='Tax 5%' , y='City', text_auto=True)
        st.plotly_chart(q1)
    
    # 2 - What is the most popular Product line based on the number of invoices?
    with tabs[1]:
        st.title('What is the most popular Product line based on the number of invoices?')
        q2 = px.histogram(df,y='Quantity' , x='Product line',color='Product line',
                     barmode='group' , text_auto=True).update_xaxes(categoryorder='total descending')
        st.plotly_chart(q2)
        
    # 3-What is the average Tax (5%) paid by customers in each City?
    with tabs[2]:
        st.title('What is the average Tax (5%) paid by customers in each City?')
        q3 = px.box(df , x='Tax 5%')
        st.plotly_chart(q3)
        
    # 4- What is the total quantity sold in each Product line?
    with tabs[3]:
        st.title('What is the total quantity sold in each Product line?')
        hig_quent = df.groupby('Product line')['Quantity'].sum().reset_index()
        hig_quent = hig_quent.sort_values(by='Quantity' , ascending=0)
        q4 = px.bar(hig_quent, x='Product line' , y='Quantity' , text_auto=True ,color='Quantity')
        explode_effect = [0.0, 0.0, 0.0, 0.0, 0.0, 0.2]
        custom_colors = ['blue', 'orange', 'green', 'darkblue', 'aqua', 'Deeppink' , 'pink']
        q44 = go.Figure(go.Pie(labels=df['Product line'] , values=df['Quantity'] ,
                               pull=explode_effect, marker =dict(colors=custom_colors)))
        st.plotly_chart(q4)
        st.plotly_chart(q44)
        hig_quent
        
    # 5-Which City has the highest number of unique customers?
    with tabs[4]:
        st.title('Which City has the highest number of unique customers?')
        q5 = px.histogram(df, x='Customer type', color='Customer type',facet_col='City', barmode='group' ,text_auto=True)
        st.plotly_chart(q5)
    pass
#############################################################################################################################
#- Gender-Based Analysis
#########################
elif select_visual == 'Gender-Based Analysis':
    tabs2 = st.tabs(['average Unit price of items' , ' Product line is most popular' , 'proportion of invoices by Gender'])
# 6- What is the average Unit price of items purchased by male and female customers?
    with tabs2[0]:
        st.title('What is the average Unit price of items purchased by male and female customers?')
        q6 =px.box(df , x='Unit price' , color='Gender')
        st.plotly_chart(q6)
    
# 7-Which Product line is most popular among male customers? How about female customers?
    with tabs2[1]:
        st.title('Which Product line is most popular among male customers? How about female customers?')
        q7 = px.histogram(df,y='Quantity',x='Product line',facet_col='Gender' , text_auto=True ,color='Product line')
        st.plotly_chart(q7)
        
#8-What is the proportion of invoices by Gender in each City?
    with tabs2[2]:
        st.title('What is the proportion of invoices by Gender in each City?')
        q8 = px.histogram(df , y='total price' , x='Gender' , facet_col='City' , text_auto=True)
        st.plotly_chart(q8)
    pass
##############################################################
# - Customer Type Analysis
##########################

elif select_visual=='Customer Type Analysis':
    tabs3 = st.tabs(['total revenue generated by Customer','the highest sales for "Member" customers','average purchase Quantity'])

# 9-What is the total revenue generated by Customer type (e.g., "Member" vs "Normal")?
    with tabs3[0]:
        st.title('What is the total revenue generated by Customer type (e.g., "Member" vs "Normal")?')
        q9 = px.histogram(df ,x='Customer type' , y='Tax 5%' , height=350 , width=450 , text_auto=True)
        st.plotly_chart(q9)
        
    with tabs3[1]:
# 10-Which City has the highest sales for "Member" customers? How about "Normal" customers?
        st.title('Which City has the highest sales for "Member" customers? How about "Normal" customers?')
        q10 =px.histogram(df ,x='Customer type' , y='total price',
                     color='Customer type', facet_col='City' , text_auto=True)
        st.plotly_chart(q10)
        
# 11-What is the average purchase Quantity for each Customer type?    
    with tabs3[2]:
        st.title('What is the average purchase Quantity for each Customer type?    ')
        q11 = px.box(df , x='Customer type' , y='Quantity')
        st.plotly_chart(q11)
    pass
#############################################################
#-Product Analysis
#######################################
elif select_visual =='Product Analysis':
    tabs4 = st.tabs(['average Unit price of products','most revenue'])

#12 - What is the average Unit price of products in each Product line?
    with tabs4[0]:
        st.title('What is the average Unit price of products in each Product line?')
        q12 =px.box(df , x='Product line' , y='Unit price')
        q122 = df.groupby('Product line')['Unit price'].median().reset_index()
        q122 = q122.sort_values(by='Unit price' , ascending=0)
        st.plotly_chart(q12)
        q122

#13-Which Product line generates the most revenue across all City?
    with tabs4[1]:
        st.title('Which Product line generates the most revenue across each City?')
        q13 = px.histogram(df , x='City', y='Tax 5%' , text_auto=True , color='Product line' , barmode='group') # for each city
        st.plotly_chart(q13)
        st.title('Which Product line generates the most revenue across all City?')
        q133 = px.histogram(df , x='Product line', y='Tax 5%' , text_auto=True , color='Product line' , barmode='group') # all city
        st.plotly_chart(q133)
    pass
###############################################
# - Tax and Revenue Analysis
################################
elif select_visual =='Tax and Revenue Analysis':
    tabs5 = st.tabs(['highest total Tax','Tax (5%) collected from each Product'])

# 14-Which City generates the highest total Tax (5%) from all sales?
    with tabs5[0]:
        st.title('Which City generates the highest total Tax (5%) from all sales?')
        custom_colors = ['green', 'darkblue', 'Deeppink']
        q14 = go.Figure(go.Pie(
            labels=df['City'],
            values=df['Tax 5%'],
            pull=[0., 0.2, 0.1],
            marker=dict(colors=custom_colors)
        ))
        st.plotly_chart(q14)
        q144 = px.histogram(df , x='City' , y='Tax 5%' , text_auto=True).update_xaxes(categoryorder='total ascending')
        st.plotly_chart(q144)
        
#15-What is the total Tax (5%) collected from each Product line?
    with tabs5[1]:
        st.title('What is the total Tax (5%) collected from each Product line?')
        q15 =px.histogram(df , x='Product line' , y='Tax 5%' , text_auto=True).update_xaxes(categoryorder='total ascending')
        tot_tax = df.groupby('Product line')['Tax 5%'].sum().reset_index()
        q155 = go.Figure(go.Pie(labels=tot_tax['Product line'],
                        values=tot_tax['Tax 5%'],
                        pull=[0.,0.,0.3,0.,0.,0.],
                        marker=dict(colors=custom_colors)
                        ))
        st.plotly_chart(q15)
        st.plotly_chart(q155)
    pass
########################################################
# -City Analysis
###################
elif select_visual == 'City Analysis':
    tabs6 = st.tabs(['average Quantity of products' , 'highest quantity sold'])

# 16-What is the average Quantity of products sold per invoice in each City?
    with tabs6[0]:
        st.title('What is the average Quantity of products sold per invoice in each City?')
        q16 =px.box(df , x='Quantity' , y='Product line')
        st.plotly_chart(q16)

# 17-highest quantity sold in each city?
    with tabs6[1]:
        st.title('highest quantity sold in each city?')
        q17 = px.histogram(df , y='Quantity',x='City',color='Product line',
                           barmode='group',text_auto=True)
        st.plotly_chart(q17)
    pass
######################################
# - summary
#################
elif select_visual=='summary':
# 18- What is the highest total price recorded in the dataset, and City, and Customer type does it belong to?
    st.title('What is the highest total price recorded in the dataset, and City, and Customer type does it belong to?')
    hig_prof = df.groupby(['Product line','City' , 'Customer type'])['Tax 5%'].sum().reset_index()
    q18 = px.bar(hig_prof , x='City', y='Tax 5%' , color='Product line',facet_col='Customer type',
           barmode='group', text_auto=True)
    st.plotly_chart(q18)
pass
